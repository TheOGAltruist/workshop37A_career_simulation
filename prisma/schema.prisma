// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
 id String @id @default(uuid())
 name String
 password String
 username String @unique
 email String @unique
 reviews Review[]
 comments Comment[]
}

model Item {
  id String @id @default(uuid())
  name String @unique
  description String
  category String
  price Float
  imageUrl String
  reviews Review[]
  comments Comment[]
}

model Review {
  id String @id @default(uuid())
  text String
  rating Float
  created_at DateTime @default(now())
  item Item @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item_id String
  user User @relation(fields: [user_id], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  user_id String @default("12345")
  comments Comment[]
  @@unique([user_id, item_id])
}

model Comment {
  id String @id @default(uuid())
  text String
  created_at DateTime @default(now())
  item Item @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item_id String
  user User @relation(fields: [user_id], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  user_id String @default("12345")
  review Review @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  review_id String
  @@unique([user_id, review_id])
}